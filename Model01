//모델 살펴보기

# 0. 사용할 패키지 불러오기
from keras.utils import np_utils
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Activation
import numpy as np
from numpy import argmax

# 1. 데이터셋 생성하기

# 훈련셋과 시험셋 불러오기
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# 데이터셋 전처리
x_train = x_train.reshape(60000, 784).astype('float32') / 255.0
x_test = x_test.reshape(10000, 784).astype('float32') / 255.0

# 원핫인코딩 (one-hot encoding) 처리
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)

# 훈련셋과 검증셋 분리
x_val = x_train[:42000] # 훈련셋의 30%를 검증셋으로 사용
x_train = x_train[42000:]
y_val = y_train[:42000] # 훈련셋의 30%를 검증셋으로 사용
y_train = y_train[42000:]

# 2. 모델 구성하기
model = Sequential()
model.add(Dense(units=64, input_dim=28*28, activation='relu'))
model.add(Dense(units=10, activation='softmax'))

# 3. 모델 학습과정 설정하기
model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])

# 4. 모델 학습시키기
model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_val, y_val))

# 5. 모델 평가하기
loss_and_metrics = model.evaluate(x_test, y_test, batch_size=32)
print('')
print('loss_and_metrics : ' + str(loss_and_metrics))

# 6. 모델 사용하기
xhat_idx = np.random.choice(x_test.shape[0], 5)
xhat = x_test[xhat_idx]
yhat = model.predict_classes(xhat)

for i in range(5):
    print('True : ' + str(argmax(y_test[xhat_idx[i]])) + ', Predict : ' + str(yhat[i]))
    
============================================================================================>
error 01.
AttributeError                            Traceback (most recent call last)
<ipython-input-4-8ab1c2e01784> in <module>
     46 xhat_idx = np.random.choice(x_test.shape[0], 5)
     47 xhat = x_test[xhat_idx]
---> 48 yhat = model.predict_classes(xhat)
     49 
     50 for i in range(5):

AttributeError: 'Sequential' object has no attribute 'predict_classes'
=============================================================================================
predict 는 probability를
predict_classes 는 label 을 제공

=============================================================================================
해결 :
yhat = model.predict_classes(xhat) 주석처리
1번 yhat = np.round(yhat).astype(int) or
2번 yhat = np.argmax(model.predict(xhat), axis=-1) 추가

2번이 좀 더 정확함
=============================================================================================
실행결과 : 실행시킬 때마다 바뀜
Epoch 1/5
563/563 [==============================] - 1s 2ms/step - loss: 1.1554 - accuracy: 0.7247 - val_loss: 0.6443 - val_accuracy: 0.8452
Epoch 2/5
563/563 [==============================] - 1s 2ms/step - loss: 0.5104 - accuracy: 0.8701 - val_loss: 0.4725 - val_accuracy: 0.8723
Epoch 3/5
563/563 [==============================] - 1s 2ms/step - loss: 0.4096 - accuracy: 0.8904 - val_loss: 0.4118 - val_accuracy: 0.8855
Epoch 4/5
563/563 [==============================] - 1s 2ms/step - loss: 0.3642 - accuracy: 0.8996 - val_loss: 0.3776 - val_accuracy: 0.8930
Epoch 5/5
563/563 [==============================] - 1s 2ms/step - loss: 0.3364 - accuracy: 0.9066 - val_loss: 0.3568 - val_accuracy: 0.8986
loss_and_metrics : [0.3319035768508911, 0.906499981880188]
True : 5, Predict : 5
True : 4, Predict : 4
True : 9, Predict : 9
True : 1, Predict : 1
True : 9, Predict : 7
